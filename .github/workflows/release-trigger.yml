name: Tag Trigger - Build and Push Image

on:
  push:
    tags:
      - '*/**'  # Matches any tag with format image/version

permissions:
  contents: read
  actions: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract image name and version from tag
        id: tag-info
        run: |
          # Extract image name and version from tag (format: image/version)
          TAG_NAME="${{ github.ref_name }}"
          IMAGE_NAME=$(echo "$TAG_NAME" | cut -d'/' -f1)
          VERSION=$(echo "$TAG_NAME" | cut -d'/' -f2)
          
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          echo "Processing tag: $TAG_NAME"
          echo "Image: $IMAGE_NAME"
          echo "Version: $VERSION"

      - name: Determine version extraction method
        id: version-method
        run: |
          IMAGE_NAME="${{ steps.tag-info.outputs.image_name }}"
          
          # Determine version extraction method based on image type
          case $IMAGE_NAME in
            "mock-client"|"metrics-collector"|"infrastructure-monitoring")
              echo "version_type=dockerfile" >> $GITHUB_OUTPUT
              ;;
            "workload-runner"|"batch-monitor")
              echo "version_type=pyproject" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Error: Unknown image $IMAGE_NAME"
              exit 1
              ;;
          esac

      - name: Build and push using existing script
        run: |
          IMAGE_NAME="${{ steps.tag-info.outputs.image_name }}"
          VERSION="${{ steps.tag-info.outputs.version }}"
          IMAGE_TAG="$IMAGE_NAME/$VERSION"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          
          echo "Building $IMAGE_NAME with tag $IMAGE_TAG for tag ${{ steps.tag-info.outputs.tag_name }}"
          echo "AWS Region: $AWS_REGION"
          
          # Use the existing build-dockerfile.sh script
          cd images
          ./build-dockerfile.sh $IMAGE_NAME --region $AWS_REGION --tag $IMAGE_TAG --push
          
          echo "âœ… Successfully built and pushed $IMAGE_NAME:$IMAGE_TAG for tag ${{ steps.tag-info.outputs.tag_name }}"
